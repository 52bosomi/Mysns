name: Java CI with Gradle

on:
  push:
    tags:
      - 'web/v*'

jobs:
  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - name: Set-Version
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
        echo $RELEASE_VERSION
        
    - name: set version
      run: |
        bash version.sh

    - name: Grant execute permission for gradlew
      run: chmod +x ./mySns/mySns/gradlew
      
    - name: Build with Gradle
      run: |
        cd mySns/mySns
        ./gradlew clean build
   
    - name: Run Tests
      env:
        CHECK_EXCUTEABLE: 1    
      run: |
        target=''
        files=`ls mySns/mySns/build/libs/*.jar`
        for f in $files
        do
           target=`echo $f`
        done
        cp $target mySns/mySns/build/libs/mysns.jar
        java -jar `echo $target` &

    - name: web port open test
      run: |
        wget http://localhost:8888
        
    - uses: actions/upload-artifact@v2
      with:
        name: libs
        path: mySns/mySns/build/libs/mysns.jar
        
  build-if-failed:
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && (needs.build.result == 'failure')
    steps:
      - name: pre excute failed
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Slack Notification Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF2D00' # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'Preexcute python script was failed'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: MySNS-Podo
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  deploy:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ (needs.build.result != 'failure') }} # if not pass before step, skip this step
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # - name: make dir
      # - run: |
      #     mkdir -p mySns/mySns/build/libs
      #     ls -al mySns/mySns/build/libs

      # Runs a single command using the runners shell
      - name: Set-Version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
          echo $RELEASE_VERSION
          mkdir -p mySns/mySns/build/libs
          ls -al mySns/mySns/build/libs

      # file cache
      - uses: actions/download-artifact@v2
        with:
          path: mySns/mySns/build

      # pull buildx       
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # authorize ssl certificates for login
      - name: set cert
        run: |
          bash cert.sh
          ls -al mySns/mySns/build/libs
      
      # login to harbor
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: harbor.dndev.pw:4443
          username: ${{ secrets.HARBOR_BOT_ID }}
          password: ${{ secrets.HARBOR_BOT_PW }}
      # start build and push
      - name: Build the tagged Docker image
        run: docker build . --file Dockerfile --tag harbor.dndev.pw:4443/mysns/web:latest
      - name: Push the tagged Docker image
        run: docker push harbor.dndev.pw:4443/mysns/web:latest
        
  deploy-if-failed:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && (needs.deploy.result == 'failure')
    steps:
      - name: failed docker image deploy to harbor
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Slack Notification Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF2D00' # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'failed docker image deploy to harbor'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: MySNS-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  apply:
    # The type of runner that the job will run on
    needs: deploy
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: Webhook
        run: curl -s -d "payload={\"feel\":\"WTF\"}" "${{ secrets.WEB_HOOK_TARGET }}"
      
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'deployed new version for MySNS project'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: MySNS-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
  apply-if-failed:
    runs-on: ubuntu-latest
    needs: [apply]
    if: always() && (needs.apply.result == 'failure')
    steps:
      - name: WEBHOOK apply was failed
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Slack Notification Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF2D00' # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'WEBHOOK apply was failed'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: MySNS-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
